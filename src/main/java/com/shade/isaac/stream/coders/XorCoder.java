package com.shade.isaac.stream.coders;

import com.shade.isaac.stream.ArchiveCoder;

import java.nio.ByteBuffer;

public final class XorCoder {
    private static final int[] KEY = {
        0xb0, 0x22, 0x5d, 0x47, 0xd3, 0x1b, 0x59, 0xd1, 0x97, 0x37, 0xfb, 0xd2, 0xc0, 0x31, 0x86, 0xfd,
        0xb5, 0xdd, 0xac, 0x4b, 0xb4, 0x01, 0x15, 0x52, 0x01, 0x0a, 0x75, 0x08, 0x5d, 0x50, 0xfe, 0x8c,
        0xa8, 0xaf, 0xd5, 0xcb, 0x09, 0xee, 0xdc, 0xca, 0x76, 0xc4, 0x3f, 0x67, 0xed, 0x09, 0x8f, 0x64,
        0x43, 0x56, 0x30, 0x1a, 0x89, 0x2e, 0xdf, 0xf9, 0xe4, 0xb8, 0x13, 0x1a, 0xbe, 0xaf, 0xa4, 0x02,
        0xff, 0x60, 0x22, 0xe0, 0x0b, 0xff, 0xae, 0xc9, 0x7d, 0xa0, 0x27, 0xf9, 0x11, 0x63, 0x2f, 0xe1,
        0x20, 0x7e, 0x51, 0xd7, 0x0e, 0xcd, 0xc4, 0xd4, 0xcf, 0xcf, 0xa1, 0x88, 0x99, 0x42, 0x96, 0xcf,
        0xf0, 0xc1, 0x54, 0xc3, 0x36, 0x94, 0xc2, 0x92, 0xdc, 0xb8, 0x63, 0xca, 0xca, 0x32, 0x12, 0x7a,
        0x3c, 0x88, 0x5f, 0xd2, 0x4b, 0xc3, 0xe4, 0x69, 0x74, 0x32, 0xbd, 0x2c, 0x42, 0x28, 0xb2, 0x34
    };

    public static final ArchiveCoder.Encoder ENCODER = (src, dst) -> {
        final byte[] buffer = new byte[1024];
        while (src.remaining() > 0) {
            final int length = Math.min(src.remaining(), buffer.length);
            src.get(buffer, 0, length);
            for (int i = 0; i < length; i++) {
                buffer[i] ^= KEY[i % KEY.length];
            }
            dst.write(ByteBuffer.wrap(buffer, 0, length));
        }
    };

    public static final ArchiveCoder.Decoder DECODER = (src, dst) -> {
        final ByteBuffer buffer = ByteBuffer.allocate(1024);
        while (src.read(buffer) > 0) {
            for (int i = 0; i < buffer.limit(); i++) {
                buffer.put(i, (byte) (buffer.get(i) ^ KEY[i % KEY.length]));
            }
            buffer.position(0);
        }
        dst.put(buffer);
    };

    private XorCoder() {
    }
}
